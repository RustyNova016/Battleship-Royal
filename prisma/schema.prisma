generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["filteredRelationCount"]
}

generator zod {
    provider = "prisma-zod-generator"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model gamesession {
    id                 String               @id @default(cuid())
    isStarted          Boolean              @default(false)
    isEnded            Boolean              @default(false)
    gameTypeId         String
    gametype           gametype             @relation(fields: [gameTypeId], references: [id])
    gamesessionplayers gamesessionplayers[]
}

model gamesessionplayers {
    playerId     String
    sessionId    String
    isDefeated   Boolean        @default(false)
    gamesession  gamesession    @relation(fields: [sessionId], references: [id], onUpdate: Restrict)
    player       Player         @relation(fields: [playerId], references: [id])
    playermove   playermove[]
    shiplocation shiplocation[]

    @@id([playerId, sessionId])
}

model gametype {
    id          String        @id @default(cuid())
    name        String
    maxPlayers  Int
    gamesession gamesession[]
}

model ship {
    id           String         @id @default(cuid())
    name         String
    length       Int
    shiplocation shiplocation[]
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Player        Player[]
}

model shiplocation {
    shipId             String
    sessionID          String
    playerId           String
    x                  Int
    y                  Int
    ship               ship               @relation(fields: [shipId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    gamesessionplayers gamesessionplayers @relation(fields: [sessionID, playerId], references: [sessionId, playerId], onDelete: NoAction, onUpdate: NoAction)

    @@id([shipId, sessionID, playerId])
}

model playermove {
    moveNumber         Int
    playerId           String
    sessionId          String
    x                  Int
    y                  Int
    gamesessionplayers gamesessionplayers @relation(fields: [playerId, sessionId], references: [playerId, sessionId], onDelete: NoAction, onUpdate: NoAction)

    @@id([playerId, sessionId, moveNumber])
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Player {
    id                 String               @id @default(cuid())
    userId             String?
    name               String?
    user               User?                @relation(fields: [userId], references: [id])
    gamesessionplayers gamesessionplayers[]
}
