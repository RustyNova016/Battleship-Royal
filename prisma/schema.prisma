generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model gamesession {
  id                 String               @id @default(cuid())
  isEnded            Boolean              @default(false)
  gametype           gametype             @relation(fields: [id], references: [id])
  gamesessionplayers gamesessionplayers[]
}

model gamesessionplayers {
  userId       String
  sessionId    String
  isDefeated   Boolean        @default(false)
  gamesession  gamesession    @relation(fields: [sessionId], references: [id], onUpdate: Restrict)
  user         User           @relation(fields: [userId], references: [id])
  playermove   playermove[]
  shiplocation shiplocation[]

  @@id([userId, sessionId])
}

model gametype {
  id          String        @id @default(cuid())
  maxPlayers  Int
  gamesession gamesession[]
}

model ship {
  id           String         @id @default(cuid())
  name         String
  length       Int
  shiplocation shiplocation[]
}

model User {
  id                 String               @id @default(cuid())
  name               String?
  email              String?              @unique
  emailVerified      DateTime?
  image              String?
  accounts           Account[]
  sessions           Session[]
  gamesessionplayers gamesessionplayers[]
}

model shiplocation {
  shipId             String
  sessionID          String
  userId             String
  x                  Int
  y                  Int
  ship               ship               @relation(fields: [shipId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  gamesessionplayers gamesessionplayers @relation(fields: [sessionID, userId], references: [sessionId, userId], onDelete: NoAction, onUpdate: NoAction)

  @@id([shipId, sessionID, userId])
}

model playermove {
  moveNumber         Int
  userId             String
  sessionId          String
  x                  Int
  y                  Int
  gamesessionplayers gamesessionplayers @relation(fields: [userId, sessionId], references: [userId, sessionId], onDelete: NoAction, onUpdate: NoAction)

  @@id([userId, sessionId, moveNumber])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
